# * 스택
# - 데이터를 제한적으로 접근할 수 있는 구조
#   -> 한쪽 끝에서만 자료를 넣거나 뺄 수 있는 구조
# - 가장 나중에 쌓은 데이터를 가장 먼저 빼낼 수 있는 데이터 구조

# * 스택 구조
# - 스택은 LIFO 또는 FILO 데이터 관리 방식을 따름
#   1. LIFO : 마지막에 넣은 데이터를 가장 먼저 추출하는 데이터 관리 정책
#   2. FILO : 처음에 넣은 데이터를 가장 마지막에 추출하는 데이터 관리 정책
# - 대표적인 스택의 활용
#   - 컴퓨터 내부의 프로세스 구조의 함수 동작 방식
# - 주요 기능
#   - push() : 데이터를 스택에 쌓기
#   - pop() : 데이터를 스택에서 꺼내기
  
# * 스택 구조와 프로세스 스택
# - 스택 구조는 프로세스 실행 구조의 가장 기본

# * 자료 구조 스택의 장단점
# - 장점
#   1. 구조가 단순해서 구현이 쉽다.
#   2. 데이터 저장/ 읽기 속도가 빠르다.
# - 단점(일반적인 스택 구현시)
#   1. 데이터 최대 갯수를 미리 정해야 한다.
#     - 파이썬의 경우 재귀 함수는 1000번까지만 호출이 가능함
#   2. 저장 공간의 낭비가 발생할 수 있음
#     - 미리 최대 갯수만큼 저장 공간을 확보해야 함
    
# ----> 스택은 단순하고 빠른 성능을 위해 사용되므로, 보통 배열 구조를 활용해서 구현하는 것이 일반적임. 위에서 열거한 단점이 있을 수 있으니 인지하고 있자!!
# ** 재귀함수 -> 함수안에서 자기 자신을 호출하는 함수

data_stack = list()

data_stack.append(1)
data_stack.append(2)

print(f"data_stack : {data_stack}")
print(f"data_stack_pop : {data_stack.pop()}")
 
